(()=>{class e{constructor(){console.log("PacaBingo constructor started"),this.appName="Paca Bingo",this.apiKey="DSGPEUEVCNE76GIS6Z73EUX4FSXD4YG237",this.contractAddress="0x36294477e1b5eF4b6531DE2dD8aa79bb6ceBBd36",this.stakingAddress="0x30D22DA999f201666fB94F09aedCA24419822e5C",this.adminAddress="0x9B34b37dc4D5917A22289Cf51473c22a2F5f3984".toLowerCase(),this.usdtAddress="0x55d398326f99059fF775485246999027B3197955",this.usdtABI=[{constant:!0,inputs:[{name:"_owner",type:"address"}],name:"balanceOf",outputs:[{name:"balance",type:"uint256"}],type:"function"},{constant:!1,inputs:[{name:"_spender",type:"address"},{name:"_value",type:"uint256"}],name:"approve",outputs:[{name:"",type:"bool"}],type:"function"},{constant:!0,inputs:[{name:"_owner",type:"address"},{name:"_spender",type:"address"}],name:"allowance",outputs:[{name:"",type:"uint256"}],type:"function"}],this.contractABI=[{inputs:[{internalType:"address",name:"_usdtToken",type:"address"},{internalType:"address",name:"_stakingContract",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"gameId",type:"uint256"},{indexed:!1,internalType:"enum PacaBingo.GameMode",name:"mode",type:"uint8"}],name:"GameCreated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"gameId",type:"uint256"},{indexed:!1,internalType:"address",name:"winner",type:"address"}],name:"GameFinished",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"gameId",type:"uint256"},{indexed:!0,internalType:"address",name:"player",type:"address"}],name:"TicketPurchased",type:"event"},{inputs:[{internalType:"enum PacaBingo.GameMode",name:"mode",type:"uint8"}],name:"buyTicket",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"currentGameId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"gameId",type:"uint256"}],name:"getGameInfo",outputs:[{internalType:"enum PacaBingo.GameMode",name:"mode",type:"uint8"},{internalType:"uint256",name:"prizePool",type:"uint256"},{internalType:"bool",name:"active",type:"bool"},{internalType:"uint256",name:"playerCount",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"gameId",type:"uint256"}],name:"getGamePlayers",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"games",outputs:[{internalType:"enum PacaBingo.GameMode",name:"mode",type:"uint8"},{internalType:"uint256",name:"prizePool",type:"uint256"},{internalType:"bool",name:"active",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"playerGames",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"enum PacaBingo.GameMode",name:"",type:"uint8"}],name:"playerLimits",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"stakingContract",outputs:[{internalType:"contract IStaking",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"enum PacaBingo.GameMode",name:"",type:"uint8"}],name:"ticketPrices",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"usdt",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"}],this.web3=null,this.contract=null,this.usdtContract=null,this.account=null,this.isAdmin=!1,this.selectedMode=null,this.ws=null,"loading"===document.readyState?document.addEventListener("DOMContentLoaded",(()=>{console.log("DOM loaded via event listener"),this.init()})):(console.log("DOM already loaded"),this.init())}async init(){if(console.log("Initializing PacaBingo..."),this.connectBtn=document.getElementById("connectWalletBtn"),this.walletInfo=document.getElementById("walletInfo"),this.walletAddress=document.getElementById("walletAddress"),this.disconnectBtn=document.getElementById("disconnectWalletBtn"),this.adminPanel=document.getElementById("adminPanel"),this.adminToggleBtn=document.getElementById("adminToggleBtn"),this.connectBtn.addEventListener("click",(()=>this.connectWallet())),this.disconnectBtn.addEventListener("click",(()=>this.disconnectWallet())),this.adminToggleBtn&&this.adminToggleBtn.addEventListener("click",(()=>this.toggleAdminPanel())),document.querySelectorAll(".mode-card").forEach((e=>{const t=e.querySelector(".select-mode-btn");t&&t.addEventListener("click",(()=>this.selectGameMode(e)))})),this.connectWebSocket(),void 0!==window.ethereum)try{this.web3=new Web3(window.ethereum),this.contract=new this.web3.eth.Contract(this.contractABI,this.contractAddress),this.usdtContract=new this.web3.eth.Contract(this.usdtABI,this.usdtAddress),56!==await this.web3.eth.getChainId()&&(alert("Please switch to Binance Smart Chain Mainnet"),await window.ethereum.request({method:"wallet_switchEthereumChain",params:[{chainId:"0x38"}]})),window.ethereum.on("accountsChanged",(e=>this.handleAccountsChanged(e))),window.ethereum.on("chainChanged",(()=>window.location.reload())),this.connectWallet(!0)}catch(e){console.error("Failed to initialize Web3:",e),alert("Failed to initialize Web3: "+e.message)}else console.log("Please install MetaMask!"),alert("Please install MetaMask to play Paca Bingo!")}connectWebSocket(){const e=`${"https:"===window.location.protocol?"wss:":"ws:"}//${window.location.hostname}:8080`;this.ws=new WebSocket(e),this.ws.onopen=()=>{console.log("Connected to WebSocket server"),this.startPingInterval()},this.ws.onmessage=e=>{try{const t=JSON.parse(e.data);"playerCount"===t.type&&this.updateOnlineCount(t.count)}catch(e){console.error("Error processing WebSocket message:",e)}},this.ws.onclose=()=>{console.log("WebSocket connection closed"),setTimeout((()=>this.connectWebSocket()),5e3)},this.ws.onerror=e=>{console.error("WebSocket error:",e)}}startPingInterval(){setInterval((()=>{this.ws&&this.ws.readyState===WebSocket.OPEN&&this.ws.ping()}),3e4)}updateOnlineCount(e){this.onlineCount&&(this.onlineCount.textContent=e,document.querySelectorAll(".mode-card").forEach((t=>{const n={Solo:1,"5v5":5,"10v10":10,"20v20":20}[t.dataset.mode],a=t.querySelector(".price"),o=t.querySelector(".select-mode-btn");e<n?(t.classList.add("disabled"),a.textContent=`Not enough players (${e}/${n})`,o.disabled=!0):(t.classList.remove("disabled"),this.account?this.updateGameModePrices():a.textContent="Connect Wallet",o.disabled=!this.account)})))}async connectWallet(e=!1){try{let t;if(console.log("Connecting wallet..."),t=e?await window.ethereum.request({method:"eth_accounts"}):await window.ethereum.request({method:"eth_requestAccounts"}),0===t.length)throw new Error("No accounts found");this.account=t[0],this.walletAddress.textContent=this.account.slice(0,6)+"..."+this.account.slice(-4),this.connectBtn.style.display="none",this.walletInfo.style.display="flex",this.isAdmin=this.account.toLowerCase()===this.adminAddress,this.isAdmin&&this.adminPanel&&(this.adminPanel.style.display="block"),await this.updateGameModePrices(),console.log("Wallet connected:",this.account),this.monitorGameState()}catch(e){console.error("Wallet connection error:",e),alert("Failed to connect wallet: "+e.message)}}async updateGameModePrices(){if(!this.account)return;const e={Solo:1,"5v5":2,"10v10":5,"20v20":10};document.querySelectorAll(".mode-card").forEach((async t=>{const n=t.dataset.mode,a=e[n],o=t.querySelector(".price");o&&(o.textContent=`${a} USDT`)}))}async selectGameMode(e){if(!this.account)return void alert("Please connect your wallet first");const t=e.dataset.mode,n=this.getModeEnum(t);try{console.log("Starting ticket purchase for mode:",t,"enum:",n);const e=await this.contract.methods.gameModeConfigs(n).call();console.log("Game mode config:",e);const a=e.ticketPrice,o=await this.usdtContract.methods.balanceOf(this.account).call();if(console.log("USDT Balance:",o),BigInt(o)<BigInt(a))return void alert("Insufficient USDT balance");const i=await this.usdtContract.methods.allowance(this.account,this.contractAddress).call();if(console.log("Current allowance:",i),BigInt(i)<BigInt(a)){console.log("Approving USDT spending...");const e=await this.usdtContract.methods.approve(this.contractAddress,a).send({from:this.account});console.log("USDT approved:",e)}else console.log("USDT already approved");console.log("Buying ticket...");const s=await this.contract.methods.buyTicket(n).send({from:this.account,gasLimit:5e5});console.log("Ticket purchased:",s),this.selectedMode=t,this.updateGameModePrices(),alert("Ticket purchased successfully! Game will start when enough players join.")}catch(e){console.error("Error purchasing ticket:",e),alert("Error purchasing ticket: "+e.message)}}getModeEnum(e){return{Solo:0,"5v5":1,"10v10":2,"20v20":3}[e]}disconnectWallet(){console.log("Disconnecting wallet..."),this.account=null,this.isAdmin=!1,this.connectBtn.style.display="block",this.walletInfo.style.display="none",this.adminPanel&&(this.adminPanel.style.display="none"),document.querySelectorAll(".mode-card").forEach((e=>{e.classList.remove("selected");const t=e.querySelector(".price");t&&(t.textContent="Connect Wallet")}));const e=document.getElementById("gameInfo");e&&(e.style.display="none")}async handleAccountsChanged(e){0===e.length?this.disconnectWallet():e[0]!==this.account&&(this.account=e[0],await this.connectWallet(!0))}toggleAdminPanel(){if(console.log("Toggling admin panel"),this.adminControls){const e="block"===this.adminControls.style.display;this.adminControls.style.display=e?"none":"block",console.log("Admin panel visibility:",!e)}else console.error("Admin controls element not found")}async updateGameModePrice(){try{const e=document.getElementById("adminModeSelect"),t=document.getElementById("newPrice");if(!e||!t)throw new Error("Admin control elements not found");const n=e.value,a=t.value;if(!a||isNaN(a)||a<=0)throw new Error("Invalid price");const o=this.web3.utils.toWei(a,"ether"),i={Solo:0,"5v5":1,"10v10":2,"20v20":3}[n];await this.contract.methods.updateGameModeConfig(i,1,20,o,!0).send({from:this.account}),alert("Price updated successfully!"),await this.updateGameModePrices()}catch(e){console.error("Error updating price:",e),alert("Failed to update price: "+e.message)}}async updatePrizeInfo(e){try{const t=await this.contract.methods.games(e).call(),n=t.prizePool,a=30*n/100,o=70*n/100;document.getElementById("oneLinePrize").textContent=`${this.web3.utils.fromWei(a.toString(),"ether")} USDT`,document.getElementById("fullHousePrize").textContent=`${this.web3.utils.fromWei(o.toString(),"ether")} USDT`,t.hasOneLineWinner&&(document.getElementById("oneLineWinner").textContent=`Winner: ${this.shortenAddress(t.oneLineWinner)}`),t.hasFullHouseWinner&&(document.getElementById("fullHouseWinner").textContent=`Winner: ${this.shortenAddress(t.fullHouseWinner)}`)}catch(e){console.error("Error updating prize info:",e)}}shortenAddress(e){return`${e.substring(0,6)}...${e.substring(e.length-4)}`}async monitorGameState(){if(this.account){try{const e=await this.contract.methods.playerGames(this.account).call();if("0"===e)return;const t=await this.contract.methods.gameStates(e).call(),n=await this.contract.methods.currentGames(e).call();if(console.log("Game State:",{gameId:e,gameState:t,currentGame:n}),t.finished&&t.winner===this.account){alert("Congratulations! You won! Your prize has been automatically staked. Check your stake at https://paca.finance");try{await this.contract.methods.claimPrize(e).send({from:this.account})}catch(e){console.error("Error claiming prize:",e)}}}catch(e){console.error("Error monitoring game state:",e)}setTimeout((()=>this.monitorGameState()),5e3)}}}document.addEventListener("DOMContentLoaded",(()=>{console.log("Creating PacaBingo instance..."),window.pacaBingo=new e}))})();
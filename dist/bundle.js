/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./app.js":
/*!****************!*\
  !*** ./app.js ***!
  \****************/
/***/ (() => {

eval("class PacaBingo {\n    constructor() {\n        console.log('PacaBingo constructor started');\n        \n        // App configuration\n        this.appName = \"Paca Bingo\" || 0;\n        this.apiKey = \"DSGPEUEVCNE76GIS6Z73EUX4FSXD4YG237\";\n        \n        // Contract configuration\n        this.contractAddress = '0x36294477e1b5eF4b6531DE2dD8aa79bb6ceBBd36';\n        this.stakingAddress = '0x30D22DA999f201666fB94F09aedCA24419822e5C';\n        this.adminAddress = '0x9B34b37dc4D5917A22289Cf51473c22a2F5f3984'.toLowerCase();\n        this.usdtAddress = '0x55d398326f99059fF775485246999027B3197955';\n        this.usdtABI = [\n            {\n                \"constant\": true,\n                \"inputs\": [{\"name\": \"_owner\", \"type\": \"address\"}],\n                \"name\": \"balanceOf\",\n                \"outputs\": [{\"name\": \"balance\", \"type\": \"uint256\"}],\n                \"type\": \"function\"\n            },\n            {\n                \"constant\": false,\n                \"inputs\": [\n                    {\"name\": \"_spender\", \"type\": \"address\"},\n                    {\"name\": \"_value\", \"type\": \"uint256\"}\n                ],\n                \"name\": \"approve\",\n                \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}],\n                \"type\": \"function\"\n            },\n            {\n                \"constant\": true,\n                \"inputs\": [\n                    {\"name\": \"_owner\", \"type\": \"address\"},\n                    {\"name\": \"_spender\", \"type\": \"address\"}\n                ],\n                \"name\": \"allowance\",\n                \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}],\n                \"type\": \"function\"\n            }\n        ];\n        this.contractABI = [\n            {\n                \"inputs\": [\n                    {\"internalType\": \"address\", \"name\": \"_usdtToken\", \"type\": \"address\"},\n                    {\"internalType\": \"address\", \"name\": \"_stakingContract\", \"type\": \"address\"}\n                ],\n                \"stateMutability\": \"nonpayable\",\n                \"type\": \"constructor\"\n            },\n            {\n                \"anonymous\": false,\n                \"inputs\": [\n                    {\"indexed\": true, \"internalType\": \"uint256\", \"name\": \"gameId\", \"type\": \"uint256\"},\n                    {\"indexed\": false, \"internalType\": \"enum PacaBingo.GameMode\", \"name\": \"mode\", \"type\": \"uint8\"}\n                ],\n                \"name\": \"GameCreated\",\n                \"type\": \"event\"\n            },\n            {\n                \"anonymous\": false,\n                \"inputs\": [\n                    {\"indexed\": true, \"internalType\": \"uint256\", \"name\": \"gameId\", \"type\": \"uint256\"},\n                    {\"indexed\": false, \"internalType\": \"address\", \"name\": \"winner\", \"type\": \"address\"}\n                ],\n                \"name\": \"GameFinished\",\n                \"type\": \"event\"\n            },\n            {\n                \"anonymous\": false,\n                \"inputs\": [\n                    {\"indexed\": true, \"internalType\": \"uint256\", \"name\": \"gameId\", \"type\": \"uint256\"},\n                    {\"indexed\": true, \"internalType\": \"address\", \"name\": \"player\", \"type\": \"address\"}\n                ],\n                \"name\": \"TicketPurchased\",\n                \"type\": \"event\"\n            },\n            {\n                \"inputs\": [{\"internalType\": \"enum PacaBingo.GameMode\", \"name\": \"mode\", \"type\": \"uint8\"}],\n                \"name\": \"buyTicket\",\n                \"outputs\": [],\n                \"stateMutability\": \"nonpayable\",\n                \"type\": \"function\"\n            },\n            {\n                \"inputs\": [],\n                \"name\": \"currentGameId\",\n                \"outputs\": [{\"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\"}],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n            },\n            {\n                \"inputs\": [{\"internalType\": \"uint256\", \"name\": \"gameId\", \"type\": \"uint256\"}],\n                \"name\": \"getGameInfo\",\n                \"outputs\": [\n                    {\"internalType\": \"enum PacaBingo.GameMode\", \"name\": \"mode\", \"type\": \"uint8\"},\n                    {\"internalType\": \"uint256\", \"name\": \"prizePool\", \"type\": \"uint256\"},\n                    {\"internalType\": \"bool\", \"name\": \"active\", \"type\": \"bool\"},\n                    {\"internalType\": \"uint256\", \"name\": \"playerCount\", \"type\": \"uint256\"}\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n            },\n            {\n                \"inputs\": [{\"internalType\": \"uint256\", \"name\": \"gameId\", \"type\": \"uint256\"}],\n                \"name\": \"getGamePlayers\",\n                \"outputs\": [{\"internalType\": \"address[]\", \"name\": \"\", \"type\": \"address[]\"}],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n            },\n            {\n                \"inputs\": [{\"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\"}],\n                \"name\": \"games\",\n                \"outputs\": [\n                    {\"internalType\": \"enum PacaBingo.GameMode\", \"name\": \"mode\", \"type\": \"uint8\"},\n                    {\"internalType\": \"uint256\", \"name\": \"prizePool\", \"type\": \"uint256\"},\n                    {\"internalType\": \"bool\", \"name\": \"active\", \"type\": \"bool\"}\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n            },\n            {\n                \"inputs\": [{\"internalType\": \"address\", \"name\": \"\", \"type\": \"address\"}],\n                \"name\": \"playerGames\",\n                \"outputs\": [{\"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\"}],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n            },\n            {\n                \"inputs\": [{\"internalType\": \"enum PacaBingo.GameMode\", \"name\": \"\", \"type\": \"uint8\"}],\n                \"name\": \"playerLimits\",\n                \"outputs\": [{\"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\"}],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n            },\n            {\n                \"inputs\": [],\n                \"name\": \"stakingContract\",\n                \"outputs\": [{\"internalType\": \"contract IStaking\", \"name\": \"\", \"type\": \"address\"}],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n            },\n            {\n                \"inputs\": [{\"internalType\": \"enum PacaBingo.GameMode\", \"name\": \"\", \"type\": \"uint8\"}],\n                \"name\": \"ticketPrices\",\n                \"outputs\": [{\"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\"}],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n            },\n            {\n                \"inputs\": [],\n                \"name\": \"usdt\",\n                \"outputs\": [{\"internalType\": \"contract IERC20\", \"name\": \"\", \"type\": \"address\"}],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n            }\n        ];\n        \n        // Initialize state\n        this.web3 = null;\n        this.contract = null;\n        this.usdtContract = null;\n        this.account = null;\n        this.isAdmin = false;\n        this.selectedMode = null;\n        this.ws = null;\n\n        // Wait for DOM to be ready\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => {\n                console.log('DOM loaded via event listener');\n                this.init();\n            });\n        } else {\n            console.log('DOM already loaded');\n            this.init();\n        }\n    }\n\n    async init() {\n        console.log('Initializing PacaBingo...');\n        \n        // Get DOM elements\n        this.connectBtn = document.getElementById('connectWalletBtn');\n        this.walletInfo = document.getElementById('walletInfo');\n        this.walletAddress = document.getElementById('walletAddress');\n        this.disconnectBtn = document.getElementById('disconnectWalletBtn');\n        this.adminPanel = document.getElementById('adminPanel');\n        this.adminToggleBtn = document.getElementById('adminToggleBtn');\n\n        // Add event listeners\n        this.connectBtn.addEventListener('click', () => this.connectWallet());\n        this.disconnectBtn.addEventListener('click', () => this.disconnectWallet());\n        if (this.adminToggleBtn) {\n            this.adminToggleBtn.addEventListener('click', () => this.toggleAdminPanel());\n        }\n\n        // Add click event listeners to mode cards\n        document.querySelectorAll('.mode-card').forEach(card => {\n            const selectBtn = card.querySelector('.select-mode-btn');\n            if (selectBtn) {\n                selectBtn.addEventListener('click', () => this.selectGameMode(card));\n            }\n        });\n\n        // Connect WebSocket\n        this.connectWebSocket();\n\n        // Check if Web3 is injected by MetaMask\n        if (typeof window.ethereum !== 'undefined') {\n            try {\n                this.web3 = new Web3(window.ethereum);\n                \n                // Initialize contracts\n                this.contract = new this.web3.eth.Contract(this.contractABI, this.contractAddress);\n                this.usdtContract = new this.web3.eth.Contract(this.usdtABI, this.usdtAddress);\n\n                // Check if we're on BSC\n                const chainId = await this.web3.eth.getChainId();\n                if (chainId !== 56) { // BSC Mainnet\n                    alert('Please switch to Binance Smart Chain Mainnet');\n                    await window.ethereum.request({\n                        method: 'wallet_switchEthereumChain',\n                        params: [{ chainId: '0x38' }], // BSC Mainnet\n                    });\n                }\n\n                // Listen for account changes\n                window.ethereum.on('accountsChanged', accounts => this.handleAccountsChanged(accounts));\n                window.ethereum.on('chainChanged', () => window.location.reload());\n                \n                // Auto connect if previously connected\n                this.connectWallet(true);\n            } catch (error) {\n                console.error('Failed to initialize Web3:', error);\n                alert('Failed to initialize Web3: ' + error.message);\n            }\n        } else {\n            console.log('Please install MetaMask!');\n            alert('Please install MetaMask to play Paca Bingo!');\n        }\n    }\n\n    connectWebSocket() {\n        const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n        const wsUrl = `${wsProtocol}//${window.location.hostname}:8080`;\n        \n        this.ws = new WebSocket(wsUrl);\n\n        this.ws.onopen = () => {\n            console.log('Connected to WebSocket server');\n            // Start sending ping messages to keep connection alive\n            this.startPingInterval();\n        };\n\n        this.ws.onmessage = (event) => {\n            try {\n                const data = JSON.parse(event.data);\n                if (data.type === 'playerCount') {\n                    this.updateOnlineCount(data.count);\n                }\n            } catch (error) {\n                console.error('Error processing WebSocket message:', error);\n            }\n        };\n\n        this.ws.onclose = () => {\n            console.log('WebSocket connection closed');\n            // Try to reconnect after 5 seconds\n            setTimeout(() => this.connectWebSocket(), 5000);\n        };\n\n        this.ws.onerror = (error) => {\n            console.error('WebSocket error:', error);\n        };\n    }\n\n    startPingInterval() {\n        // Send ping every 30 seconds to keep connection alive\n        setInterval(() => {\n            if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n                this.ws.ping();\n            }\n        }, 30000);\n    }\n\n    updateOnlineCount(count) {\n        if (this.onlineCount) {\n            this.onlineCount.textContent = count;\n            \n            // Update game mode availability based on player count\n            document.querySelectorAll('.mode-card').forEach(card => {\n                const mode = card.dataset.mode;\n                const minPlayers = {\n                    'Solo': 1,\n                    '5v5': 5,\n                    '10v10': 10,\n                    '20v20': 20\n                }[mode];\n\n                const priceSpan = card.querySelector('.price');\n                const button = card.querySelector('.select-mode-btn');\n\n                if (count < minPlayers) {\n                    card.classList.add('disabled');\n                    priceSpan.textContent = `Not enough players (${count}/${minPlayers})`;\n                    button.disabled = true;\n                } else {\n                    card.classList.remove('disabled');\n                    if (this.account) {\n                        // If wallet is connected, show the price\n                        this.updateGameModePrices();\n                    } else {\n                        // If wallet is not connected, show connect wallet message\n                        priceSpan.textContent = 'Connect Wallet';\n                    }\n                    button.disabled = !this.account;\n                }\n            });\n        }\n    }\n\n    async connectWallet(silent = false) {\n        try {\n            console.log('Connecting wallet...');\n            let accounts;\n            \n            if (!silent) {\n                accounts = await window.ethereum.request({\n                    method: 'eth_requestAccounts'\n                });\n            } else {\n                accounts = await window.ethereum.request({\n                    method: 'eth_accounts'\n                });\n            }\n\n            if (accounts.length === 0) {\n                throw new Error('No accounts found');\n            }\n\n            this.account = accounts[0];\n            this.walletAddress.textContent = this.account.slice(0, 6) + '...' + this.account.slice(-4);\n            this.connectBtn.style.display = 'none';\n            this.walletInfo.style.display = 'flex';\n\n            // Check if user is admin\n            this.isAdmin = this.account.toLowerCase() === this.adminAddress;\n            if (this.isAdmin && this.adminPanel) {\n                this.adminPanel.style.display = 'block';\n            }\n\n            // Update game mode prices\n            await this.updateGameModePrices();\n\n            console.log('Wallet connected:', this.account);\n            this.monitorGameState();\n        } catch (error) {\n            console.error('Wallet connection error:', error);\n            alert('Failed to connect wallet: ' + error.message);\n        }\n    }\n\n    async updateGameModePrices() {\n        if (!this.account) return;\n\n        const modes = {\n            'Solo': 1,\n            '5v5': 2,\n            '10v10': 5,\n            '20v20': 10\n        };\n\n        document.querySelectorAll('.mode-card').forEach(async card => {\n            const mode = card.dataset.mode;\n            const priceInUSDT = modes[mode];\n            const priceSpan = card.querySelector('.price');\n            if (priceSpan) {\n                priceSpan.textContent = `${priceInUSDT} USDT`;\n            }\n        });\n    }\n\n    async selectGameMode(card) {\n        if (!this.account) {\n            alert('Please connect your wallet first');\n            return;\n        }\n\n        const mode = card.dataset.mode;\n        const modeEnum = this.getModeEnum(mode);\n        \n        try {\n            console.log('Starting ticket purchase for mode:', mode, 'enum:', modeEnum);\n            \n            // Get game mode config\n            const config = await this.contract.methods.gameModeConfigs(modeEnum).call();\n            console.log('Game mode config:', config);\n            const price = config.ticketPrice;\n\n            // Check USDT balance\n            const balance = await this.usdtContract.methods.balanceOf(this.account).call();\n            console.log('USDT Balance:', balance);\n            if (BigInt(balance) < BigInt(price)) {\n                alert('Insufficient USDT balance');\n                return;\n            }\n\n            // Check current allowance\n            const allowance = await this.usdtContract.methods.allowance(this.account, this.contractAddress).call();\n            console.log('Current allowance:', allowance);\n            \n            // First approve USDT spending if needed\n            if (BigInt(allowance) < BigInt(price)) {\n                console.log('Approving USDT spending...');\n                const approveResult = await this.usdtContract.methods.approve(this.contractAddress, price)\n                    .send({ from: this.account });\n                console.log('USDT approved:', approveResult);\n            } else {\n                console.log('USDT already approved');\n            }\n\n            // Then buy the ticket\n            console.log('Buying ticket...');\n            const result = await this.contract.methods.buyTicket(modeEnum)\n                .send({ \n                    from: this.account,\n                    gasLimit: 500000 // Add explicit gas limit\n                });\n            console.log('Ticket purchased:', result);\n\n            this.selectedMode = mode;\n            \n            // Update UI after purchase\n            this.updateGameModePrices();\n            alert('Ticket purchased successfully! Game will start when enough players join.');\n        } catch (error) {\n            console.error('Error purchasing ticket:', error);\n            alert('Error purchasing ticket: ' + error.message);\n        }\n    }\n\n    getModeEnum(mode) {\n        const modeEnum = {\n            'Solo': 0,\n            '5v5': 1,\n            '10v10': 2,\n            '20v20': 3\n        }[mode];\n        return modeEnum;\n    }\n\n    disconnectWallet() {\n        console.log('Disconnecting wallet...');\n        this.account = null;\n        this.isAdmin = false;\n        this.connectBtn.style.display = 'block';\n        this.walletInfo.style.display = 'none';\n        if (this.adminPanel) {\n            this.adminPanel.style.display = 'none';\n        }\n\n        // Reset game modes\n        document.querySelectorAll('.mode-card').forEach(card => {\n            card.classList.remove('selected');\n            const priceElement = card.querySelector('.price');\n            if (priceElement) {\n                priceElement.textContent = 'Connect Wallet';\n            }\n        });\n\n        // Hide game info\n        const gameInfo = document.getElementById('gameInfo');\n        if (gameInfo) {\n            gameInfo.style.display = 'none';\n        }\n    }\n\n    async handleAccountsChanged(accounts) {\n        if (accounts.length === 0) {\n            this.disconnectWallet();\n        } else if (accounts[0] !== this.account) {\n            this.account = accounts[0];\n            await this.connectWallet(true);\n        }\n    }\n\n    toggleAdminPanel() {\n        console.log('Toggling admin panel');\n        if (this.adminControls) {\n            const isVisible = this.adminControls.style.display === 'block';\n            this.adminControls.style.display = isVisible ? 'none' : 'block';\n            console.log('Admin panel visibility:', !isVisible);\n        } else {\n            console.error('Admin controls element not found');\n        }\n    }\n\n    async updateGameModePrice() {\n        try {\n            const modeSelect = document.getElementById('adminModeSelect');\n            const newPriceInput = document.getElementById('newPrice');\n            \n            if (!modeSelect || !newPriceInput) {\n                throw new Error('Admin control elements not found');\n            }\n\n            const mode = modeSelect.value;\n            const priceInBNB = newPriceInput.value;\n            \n            if (!priceInBNB || isNaN(priceInBNB) || priceInBNB <= 0) {\n                throw new Error('Invalid price');\n            }\n\n            const priceInWei = this.web3.utils.toWei(priceInBNB, 'ether');\n            \n            // Convert mode string to enum value\n            const modeEnum = {\n                'Solo': 0,\n                '5v5': 1,\n                '10v10': 2,\n                '20v20': 3\n            }[mode];\n\n            await this.contract.methods.updateGameModeConfig(\n                modeEnum,\n                1, // minPlayers (keeping existing)\n                20, // maxPlayers (keeping existing)\n                priceInWei,\n                true // active\n            ).send({ from: this.account });\n\n            alert('Price updated successfully!');\n            await this.updateGameModePrices();\n        } catch (error) {\n            console.error('Error updating price:', error);\n            alert('Failed to update price: ' + error.message);\n        }\n    }\n\n    async updatePrizeInfo(gameId) {\n        try {\n            const game = await this.contract.methods.games(gameId).call();\n            const prizePool = game.prizePool;\n            \n            // Calculate prizes\n            const oneLinePrize = (prizePool * 30) / 100; // 30% for one line\n            const fullHousePrize = (prizePool * 70) / 100; // 70% for full house\n            \n            // Update UI with prize amounts\n            document.getElementById('oneLinePrize').textContent = `${this.web3.utils.fromWei(oneLinePrize.toString(), 'ether')} USDT`;\n            document.getElementById('fullHousePrize').textContent = `${this.web3.utils.fromWei(fullHousePrize.toString(), 'ether')} USDT`;\n            \n            // Show winner addresses if available\n            if (game.hasOneLineWinner) {\n                document.getElementById('oneLineWinner').textContent = `Winner: ${this.shortenAddress(game.oneLineWinner)}`;\n            }\n            \n            if (game.hasFullHouseWinner) {\n                document.getElementById('fullHouseWinner').textContent = `Winner: ${this.shortenAddress(game.fullHouseWinner)}`;\n            }\n        } catch (error) {\n            console.error('Error updating prize info:', error);\n        }\n    }\n\n    shortenAddress(address) {\n        return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;\n    }\n\n    async monitorGameState() {\n        if (!this.account) return;\n\n        try {\n            // Get player's current game\n            const gameId = await this.contract.methods.playerGames(this.account).call();\n            if (gameId === '0') return; // No active game\n\n            // Get game state\n            const gameState = await this.contract.methods.gameStates(gameId).call();\n            const currentGame = await this.contract.methods.currentGames(gameId).call();\n\n            console.log('Game State:', {gameId, gameState, currentGame});\n\n            if (gameState.finished && gameState.winner === this.account) {\n                // Player won!\n                alert('Congratulations! You won! Your prize has been automatically staked. Check your stake at https://paca.finance');\n                \n                // Try to claim prize\n                try {\n                    await this.contract.methods.claimPrize(gameId).send({ from: this.account });\n                } catch (error) {\n                    console.error('Error claiming prize:', error);\n                }\n            }\n        } catch (error) {\n            console.error('Error monitoring game state:', error);\n        }\n\n        // Check again in 5 seconds\n        setTimeout(() => this.monitorGameState(), 5000);\n    }\n}\n\n// Initialize when the page is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    console.log('Creating PacaBingo instance...');\n    window.pacaBingo = new PacaBingo();\n});\n\n\n//# sourceURL=webpack://paca-bingo/./app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./app.js"]();
/******/ 	
/******/ })()
;